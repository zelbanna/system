#!/usr/bin/python
# -*- coding: utf-8 -*-
"""Program docstring.

Application for web based ESXi operations


"""
__author__ = "Zacharias El Banna"
__version__ = "2.0"
__status__ = "Production"

from subprocess import check_call, check_output
from sys import exit, path as syspath
syspath.append('/usr/local/sbin')
from ESXi import ESXi
from Munin import Munin
from WWW import Web

web    = Web()
web.printCGIHeader('ESXi Operations','grey')

form   = web.getForm()
host   = form.getvalue('host',"esxi1")
domain = form.getvalue('domain',"stolab")
fqdn   = host + "." + domain
nstate = form.getvalue('next-state',None)
vmid   = form.getvalue('vmid','-1')
esxi   = ESXi(fqdn)
baselink = "esxi-web.cgi?host={0}&domain={1}&next-state".format(host,domain)

print "<TABLE cellpadding='8'>"

#
# Maybe add munin "option" so that we can use other data sources?
#
if True:
 munin  = Munin('/etc/munin/munin.conf','/mnt/ramdisk/munin/lib/')
 print "<TR>"
 munin.printHtmlTd("{1}/{0}/esxi_vm_info".format(fqdn,domain))
 munin.printHtmlTd("{1}/{0}/esxi_cpu_info".format(fqdn,domain))
 munin.printHtmlTd("{1}/{0}/esxi_mem_info".format(fqdn,domain))
 print "</TR>"

#
# ESXi OPs menu and output
#

print "<TR id='bigsolid'>"
print "<TD><B>Host: {}</B></TD>".format(fqdn)
if nstate:
 if "vm-" in nstate:
  vmop = nstate.split('-')[1]
  print "<TD COLSPAN=2>[op:" + vmop + " on vmid:" + vmid + "]</TD>"
  esxi.sshConnect()
  esxi.sshSend("vim-cmd vmsvc/power." + vmop + " " + vmid)
  esxi.sshClose()
 elif nstate == 'poweroff':
  esxi.sshConnect()
  esxi.sshSend("poweroff")
  esxi.sshClose()
  print "<TD COLSPAN=2>[powering off host]</TD>"
 elif nstate == 'vmsoff':
  check_call("/usr/local/sbin/esxi-shutdown " + host + " &", shell=True)
  print "<TD COLSPAN=2>[safely shutting down all VMs, refresh page to follow progress]</TD>"
 elif nstate == 'picture':
  print "<TD COLSPAN=2><IMG SRC='images/" + host + ".jpg'></TD>"
else:
 print "<TD COLSPAN=2>&nbsp;</TD>"
 
print "</TR>"
print "<TR id='medsolid'><TD COLSPAN=3><CENTER>"
print "<A HREF={0}=poweroff>Shutdown</A>&nbsp;".format(baselink)
print "<A HREF={0}=picture>Picture</A>&nbsp;".format(baselink)
print "<A HREF=https://{0}/ui target=esxi_cont>UI</A>&nbsp;".format(fqdn)
kvmtype = esxi.getKVMType('ipmi')
if kvmtype == "amt":
 print "<A HREF=http://{0}-{2}.{1}:16992 target=esxi_kvm>{3}</A>&nbsp;".format(host,domain,kvmtype,kvmtype.upper())
else:
 print "<A HREF=http://{0}-{2}.{1}/index.html target=esxi_kvm>{3}</A>&nbsp;".format(host,domain,kvmtype,kvmtype.upper())
print "<A HREF={0}=refresh>Refresh</A>".format(baselink)
print "</CENTER></TD>"
print "</TR>"

#
# VM OPs Menu and log
#

print "<TR>"
print "<TD><TABLE WIDTH=390 BORDER=0 id='varannan'><TH>VM</TH><TH WIDTH=100>Operations</TH>"
print "<TR><TD><B>SHUTDOWN ALL VMs</B></TD><TD><CENTER><A HREF={0}=vmsoff><IMG SRC=images/shutdown.png></A></CENTER></TD></TR>".format(baselink)
statelist = esxi.loadVMs()
for vm in statelist:
 if vm[0] == vmid:
  print "<TR><TD><B>" + vm[1] + "</B></TD>"
 else:
  print "<TR><TD>" + vm[1] + "</TD>"
 print "<TD><CENTER>"
 if vm[2] == "1":
  print "<A HREF={0}=vm-shutdown&vmid={1}><IMG SRC=images/shutdown.png></A>".format(baselink,vm[0])
  print "<A HREF={0}=vm-off&vmid={1}><IMG SRC=images/poweroff.png></A>".format(baselink,vm[0])
  print "<A HREF={0}=vm-reboot&vmid={1}><IMG SRC=images/reboot.png></A>".format(baselink,vm[0])
 elif vm[2] == "3":
  print "<A HREF={0}=vm-suspendResume&vmid={1}><IMG SRC=images/start.png></A>".format(baselink,vm[0])
 else:
  print "<A HREF={0}=vm-on&vmid={1}><IMG SRC=images/start.png></A>".format(baselink,vm[0])
 print "</CENTER></TD></TR>"
print "</TABLE>"
print "</TD>"

print "<TD COLSPAN=2 id='top'>"
try:
 logs = check_output("tail -n 10 /var/log/network/"+ host +".operations.log | tac", shell=True)
 print "<TABLE BORDER=0><TH>Log Entry</TH><TR id='med'><TD>" + logs.replace('\n','<BR>') + "</TD></TR></TABLE>"
except:
 print "<CENTER><B>Logs Error</B></CENTER>" 
print "</TD>"

print "</TR>"
print "</TABLE>"

web.printCGIFooter()
